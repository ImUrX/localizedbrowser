plugins {
    id "java"
    id "xyz.wagyourtail.unimined" version "1.4.1" // reproducible builds loves me
    id 'dev.vankka.dependencydownload.plugin' version "2.0.0"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.gradleup.shadow" version "9.0.1"
}
apply from: "${rootDir}/scripts/publish-root.gradle"

version project.mod_version
group project.maven_group

base {
    archivesName = project.archives_base_name
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withSourcesJar()
}

sourceSets {
    fabric
    neoforge
}

repositories {
    mavenCentral()
    unimined.neoForgedMaven()
    unimined.spongeMaven()
    unimined.wagYourMaven("releases")
    unimined.modrinthMaven()
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        url "https://maven.siphalor.de/"
        name "Siphalor's Maven"
    }
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        intermediary()
        yarn project.mapping_version

        stubs(["intermediary", "yarn"]) {
            c(["net/minecraft/class_1496"]) {
                m(["method_56680;()Lnet/minecraft/class_1263;", "getInventoryVanilla"])
            }
            c(["net/minecraft/class_329"]) {
                m(["method_1759;(Lnet/minecraft/class_332;Lnet/minecraft/class_9779;)V", "renderHotbarVanilla"])
            }
        }

        devNamespace "yarn"
        devFallbackNamespace "intermediary"
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    fabric {
        loader project.fabric_loader_version
    }

    defaultRemapJar = true
}

unimined.minecraft(sourceSets.neoforge) {
    combineWith(sourceSets.main)

    neoForge {
        loader project.neoforge_version
    }

    minecraftRemapper.config {
        // neoforge adds 1 conflict, where 2 interfaces have a method with the same name on yarn/mojmap,
        // but the method has different names in the intermediary mappings.
        // this is a conflict because they have a class that extends both interfaces.
        // this shouldn't be a problem as long as named mappings don't make the name of those 2 methods different.
        ignoreConflicts(true)
    }

    defaultRemapJar = true
}

configurations {
    mainImplementation
}

dependencies {
    // we need this in main where it isn't by default
    implementation "org.spongepowered:mixin:0.8.5-SNAPSHOT"
    compileOnly "io.github.llamalad7:mixinextras-common:0.3.2"
    compileOnly "org.ow2.asm:asm:9.5"

    runtimeDownload "com.atilika.kuromoji:kuromoji-unidic:${project.kuromoji_version}"

    implementation "com.atilika.kuromoji:kuromoji-unidic:${project.kuromoji_version}"
    fabricImplementation(implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.32")

    fabricImplementation(neoforgeImplementation(implementation "dev.esnault.wanakana:wanakana-core:${project.wanakana_version}"))
    fabricModImplementation fabricApi.fabricModule("fabric-api-base",  project.fabric_api_version)
    fabricModImplementation fabricApi.fabricModule("fabric-key-binding-api-v1",  project.fabric_api_version)
    fabricModImplementation fabricApi.fabricModule("fabric-resource-loader-v0",  project.fabric_api_version)
    fabricModImplementation "de.siphalor:amecsapi-1.20:1.5.6+mc1.20.2", { transitive = false }
    fabricInclude "de.siphalor:amecsapi-1.20:1.5.6+mc1.20.2", { transitive = false }
    fabricInclude(neoforgeInclude("dev.esnault.wanakana:wanakana-core:${project.wanakana_version}"))

    neoforgeImplementation 'thedarkcolour:kotlinforforge-neoforge:5.9.0'
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processNeoforgeResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

//jar.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload
compileFabricJava.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload
compileNeoforgeJava.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload
shadowJar.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload
javadoc.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload

jar {
    enabled = false
}

javadoc {
    source = sourceSets.main.allJava
    options.addBooleanOption('html5', true)
}
apply from: "${project.projectDir}/scripts/publish-module.gradle"

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}
