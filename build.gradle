plugins {
    id "java"
    id "xyz.wagyourtail.unimined" version "1.0.0-SNAPSHOT"
    id 'dev.vankka.dependencydownload.plugin' version '1.3.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceSets {
    fabric {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    forge {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

tasks.register("fabricJar", Jar) {
    from sourceSets.fabric.output, sourceSets.main.output

    archiveClassifier = "fabric"
}

tasks.register("forgeJar", Jar) {
    from sourceSets.forge.output, sourceSets.main.output

    archiveClassifier = "forge"
}

repositories {
//    maven {
//        name = "wagyourtail-forge-hotfix"
//        url = "https://maven.wagyourtail.xyz/releases"
//    }
    mavenCentral()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        url "https://maven.siphalor.de/"
        name "Siphalor's Maven"
    }
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        intermediary()
        yarn(project.mapping_version)

        devFallbackNamespace "intermediary"
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    version project.minecraft_version

    mappings {
        yarn(project.mapping_version)
    }

    fabric {
        loader project.fabric_loader_version
    }
}

unimined.minecraft(sourceSets.forge) {
    version project.minecraft_version

    mappings {
        intermediary()
        yarn(project.mapping_version)

        devFallbackNamespace "intermediary"
    }

    forge {
        forge project.forge_version
        mixinConfig "modid.mixins.json"
    }
}

configurations {
    mainImplementation
    implementation {
        extendsFrom forgeImplementation
        extendsFrom fabricImplementation
    }
}

sourceSets {
    main {
        compileClasspath += configurations.mainImplementation
        runtimeClasspath += configurations.mainImplementation
    }
}

dependencies {
    // we need this in main where it isn't by default
    mainImplementation "org.spongepowered:mixin:0.8.5"

    runtimeDownload "com.atilika.kuromoji:kuromoji-unidic:${project.kuromoji_version}"

    implementation "dev.esnault.wanakana:wanakana-core:${project.wanakana_version}"
    implementation "com.atilika.kuromoji:kuromoji-unidic:${project.kuromoji_version}"

    fabricModImplementation fabricApi.fabricModule("fabric-api-base",  project.fabric_api_version)
    fabricModImplementation fabricApi.fabricModule("fabric-key-binding-api-v1",  project.fabric_api_version)
    fabricModImplementation fabricApi.fabricModule("fabric-resource-loader-v0",  project.fabric_api_version)
    fabricModImplementation "de.siphalor:amecsapi-1.19:1.3.6+mc22w17a", { transitive = false }
    fabricInclude "de.siphalor:amecsapi-1.19:1.3.6+mc22w17a", { transitive = false }
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processForgeResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

jar.dependsOn generateRuntimeDownloadResourceForRuntimeDownloadOnly, generateRuntimeDownloadResourceForRuntimeDownload

jar {
    from project.file("LICENSE-APACHE")
    from project.file("LICENSE-MIT")
}

javadoc {
    source = sourceSets.main.allJava
    options.addBooleanOption('html5', true)
}
//apply from: "${project.projectDir}/scripts/publish-module.gradle"
//
//publishing {
//    publications {
//        mavenCommon(MavenPublication) {
//            artifactId = project.archives_base_name
//            from components.java
//        }
//    }
//}
